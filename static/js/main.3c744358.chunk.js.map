{"version":3,"sources":["components/Layout/Layout.js","components/FeedbackOpions/FeedbackOptions .js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["Layout","children","className","FeedbackOptions","options","onLeaveFeedback","name","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","propType","PropTypes","number","isRequired","Section","title","Notification","massage","App","state","countTotalFeedback","countPositiveFeedbackPercentage","result","percentage","Math","round","e","target","setState","prevState","console","log","this","objKey","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAOeA,G,MAJA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OAAO,qBAAKC,UAAU,SAAf,SAAyBD,MCuBnBE,G,MAvBU,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACnC,OACE,gCACE,wBAAQC,KAAK,OAAOJ,UAAU,eAAeK,KAAK,SAASC,QAASH,EAApE,SACGD,EAAQ,KAGX,wBAAQE,KAAK,UAAUJ,UAAU,eAAeK,KAAK,SAASC,QAASH,EAAvE,SACGD,EAAQ,KAEX,wBAAQE,KAAK,MAAMJ,UAAU,eAAeK,KAAK,SAASC,QAASH,EAAnE,SACGD,EAAQ,U,gBCXXK,G,MAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKZ,UAAU,YAAf,UACE,uCAAUQ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YAKNL,EAAWM,SAAW,CACpBL,KAAMM,IAAUC,OAAOC,WACvBP,QAASK,IAAUC,OAAOC,WAC1BN,IAAKI,IAAUC,OAAOC,WACtBL,MAAOG,IAAUC,OAAOC,WACxBJ,mBAAoBE,IAAUC,OAAOC,YAKxBT,QCRAU,G,MAdC,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOnB,EAAY,EAAZA,SACrB,OACI,sBAAKC,UAAU,gBAAf,UACI,6BAAMkB,IACLnB,OCQEoB,G,MAZM,SAAC,GAAa,IAAZC,EAAW,EAAXA,QACnB,OACI,mCACA,4BAAIA,QCASC,E,4MACnBC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,mBAAqB,WAAO,IAAD,EACM,EAAKD,MAGpC,OAJyB,EACjBd,KADiB,EACXC,QADW,EACFC,K,EAMzBc,gCAAkC,WAChC,IAAMC,EAAS,EAAKF,qBAEdG,EAAqB,IADV,EAAKJ,MAAdd,KAC0BiB,EAClC,OAAOE,KAAKC,MAAMF,I,EAGpBvB,gBAAkB,SAAC0B,GAAO,IACjBzB,EAAQyB,EAAEC,OAAV1B,KAEP,EAAK2B,UAAS,SAACC,GACb,OAAO,eACJ5B,EAAO4B,EAAU5B,GAAQ,MAI/B6B,QAAQC,IAAI,EAAKZ,Q,uDAGR,IAAD,EACwBa,KAAKb,MAA5Bd,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQwB,KAAKZ,qBACnBU,QAAQC,IAAIvB,GACZ,IAAMC,EAAqBuB,KAAKX,kCAE1BY,EAASC,OAAOC,KAAKH,KAAKb,OAGhC,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASJ,MAAO,wBAAhB,SACE,cAAC,EAAD,CACAf,gBAAiBgC,KAAKhC,gBACtBD,QAASkC,MAKX,cAAC,EAAD,CAASlB,MAAO,YAAhB,SACa,IAAVP,EACC,cAAC,EAAD,CAAcS,QAAS,sBAEvB,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA7DD2B,aCDjCC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IADF,OAGAC,SAASC,eAAe,W","file":"static/js/main.3c744358.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Layout.css\";\r\n\r\nconst Layout = ({ children }) => {\r\n  return <div className=\"Layout\">{children}</div>;\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport  \"./FeedbackOptions.css\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst FeedbackOptions  = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div >\r\n      <button name='good' className='feedback-btn' type=\"button\" onClick={onLeaveFeedback}>\r\n        {options[0]}\r\n      </button>\r\n\r\n      <button name='neutral' className='feedback-btn' type=\"button\" onClick={onLeaveFeedback}>\r\n        {options[1]}\r\n      </button>\r\n      <button name='bad' className='feedback-btn' type=\"button\" onClick={onLeaveFeedback}>\r\n        {options[2]}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default FeedbackOptions ;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './Statistics.css'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div className='statistic'>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Posityve feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propType = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport \"./Section.css\";\r\n\r\nconst Section = ({title, children})=>{\r\n    return(\r\n        <div className='section-title'>\r\n            <h2 >{title}</h2>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Section","import React from \"react\";\r\nimport \"./Notification.css\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Notification = ({massage})=>{\r\n    return(\r\n        <>\r\n        <p>{massage}</p>\r\n        </>\r\n    )\r\n};\r\n\r\nNotification.propTypes = {\r\n    massage: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification","import React, { Component } from \"react\";\nimport Layout from \"../components/Layout/Layout.js\";\nimport FeedbackOptions  from \"./FeedbackOpions/FeedbackOptions \";\nimport Statistics from \"./Statistics/Statistics\";\nimport Section from \"./Section/Section\";\nimport Notification from \"./Notification/Notification\";\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    \n    const result = good + neutral + bad;\n    return result;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const result = this.countTotalFeedback();\n    const { good } = this.state;\n    const percentage = (good * 100) / result;\n    return Math.round(percentage);\n  };\n\n  onLeaveFeedback = (e) => {\n    const {name} = e.target;\n    \n    this.setState((prevState) => {\n      return {\n        [name]: prevState[name] + 1,}\n      \n\n    });\n   console.log(this.state);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    console.log(total);\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    const objKey = Object.keys(this.state);\n\n\n    return (\n      <Layout>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions  \n          onLeaveFeedback={this.onLeaveFeedback} \n          options={objKey} \n          />\n        </Section>\n\n\n        <Section title={\"Statistic\"}>\n          {total === 0 ? (\n            <Notification massage={\"No feedback given\"} />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n        </Section>\n      </Layout>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}